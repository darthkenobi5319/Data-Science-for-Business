if (auc_knn > maxAuc){
maxAuc = auc_knn
max_num = num
}
}
max_num
print(maxAuc)
enumerator = c(1,2,3,4,5,6)
maxAuc = 0
max_num = 0
for (num in enumerator)
{
knn <- knnreg(MEDV ~ ., data = train.df,k = num)
pred <- predict(knn, newdata = valid.df)
r <- roc(as.factor(ifelse(pred >= 30, 1, 0)), as.factor(ifelse(valid.df$MEDV >= 30, 1, 0)))
auc_knn = auc(r)
if (auc_knn > maxAuc){
maxAuc = auc_knn
print(maxAuc)
max_num = num
}
}
max_num
enumerator = c(1,2,3,4,5,6)
maxAuc = 0
max_num = 0
for (num in enumerator)
{
knn = knnreg(MEDV ~ ., data = train.df,k = num)
pred = predict(knn, newdata = valid.df)
r = roc(as.factor(ifelse(pred >= 30, 1, 0)), as.factor(ifelse(valid.df$MEDV >= 30, 1, 0)))
auc_knn = auc(r)
if (auc_knn > maxAuc){
maxAuc = auc_knn
print(maxAuc)
max_num = num
}
}
enumerator = c(1,2,3,4,5,6)
maxAuc = 0
max_num = 0
for (num in enumerator)
{
knn = knnreg(MEDV ~ ., data = train.df,k = num)
pred = predict(knn, newdata = valid.df)
r = roc(as.factor(ifelse(pred >= 30, 1, 0)), as.factor(ifelse(valid.df$MEDV >= 30, 1, 0)))
auc_knn = auc(r)
if (auc_knn > maxAuc){
maxAuc = auc_knn
print(maxAuc)
max_num = num
}
}
enumerator = c(1,2,3,4,5,6)
maxAuc = 0
max_num = 0
for (num in enumerator)
{
knn = knnreg(MEDV ~ ., data = train.df,k = num)
pred = predict(knn, newdata = valid.df)
r = roc(as.factor(ifelse(pred >= 30, 1, 0)), as.factor(ifelse(valid.df$MEDV >= 30, 1, 0)))
auc_knn = auc(r)
if (auc_knn > maxAuc){
maxAuc = auc_knn
print(maxAuc)
max_num = num
}
}
enumerator = c(1,2,3,4,5,6)
maxAuc = 0
max_num = 0
for (num in enumerator)
{
knn = knnreg(MEDV ~ ., data = train.df,k = num)
pred = predict(knn, newdata = valid.df)
r = roc(as.factor(ifelse(pred >= 30, 1, 0)), as.factor(ifelse(valid.df$MEDV >= 30, 1, 0)))
auc_knn = auc(r)
if (auc_knn > maxAuc){
maxAuc = auc_knn
print(maxAuc)
max_num = num
}
}
enumerator = c(1,2,3,4,5,6)
maxAuc = 0
max_num = 0
for (num in enumerator)
{
knn = knnreg(MEDV ~ ., data = train.df,k = num)
pred = predict(knn, newdata = valid.df)
r = roc(as.factor(ifelse(pred >= 30, 1, 0)), as.factor(ifelse(valid.df$MEDV >= 30, 1, 0)))
auc_knn = auc(r)
if (auc_knn > maxAuc){
maxAuc = auc_knn
print(maxAuc)
max_num = num
}
}
enumerator = c(1,2,3,4,5,6)
maxAuc = 0
max_num = 0
for (num in enumerator)
{
knn = knnreg(MEDV ~ ., data = train.df,k = num)
pred = predict(knn, newdata = valid.df)
r = roc(as.factor(ifelse(pred >= 30, 1, 0)), as.factor(ifelse(valid.df$MEDV >= 30, 1, 0)))
auc_knn = auc(r)
if (auc_knn > maxAuc){
maxAuc = auc_knn
print(maxAuc)
max_num = num
}
}
enumerator = c(1,2,3,4,5,6)
maxAuc = 0
max_num = 0
for (num in enumerator)
{
knn = knnreg(MEDV ~ ., data = train.df,k = num)
pred = predict(knn, newdata = valid.df)
r = roc(as.factor(ifelse(pred >= 30, 1, 0)), as.factor(ifelse(valid.df$MEDV >= 30, 1, 0)))
auc_knn = auc(r)
if (auc_knn > maxAuc){
maxAuc = auc_knn
print(maxAuc)
max_num = num
}
}
knn = knnreg(MEDV ~ ., data = train.df,k = 5)
pred = predict(knn, newdata = valid.df)
r = roc(as.factor(ifelse(pred >= 30, 1, 0)), as.factor(ifelse(valid.df$MEDV >= 30, 1, 0)))
auc_knn = auc(r)
knn = knnreg(MEDV ~ ., data = train.df,k = 5)
pred = predict(knn, newdata = valid.df)
r = roc(as.factor(ifelse(pred >= 30, 1, 0)), as.factor(ifelse(valid.df$MEDV >= 30, 1, 0)))
auc(r)
knn = knnreg(MEDV ~ ., data = train.df,k = 5)
pred = predict(knn, newdata = valid.df)
r = roc(as.factor(ifelse(pred >= 30, 1, 0)), as.factor(ifelse(valid.df$MEDV >= 30, 1, 0)))
auc(r)
knn = knnreg(MEDV ~ ., data = train.df,k = 6)
pred = predict(knn, newdata = valid.df)
r = roc(as.factor(ifelse(pred >= 30, 1, 0)), as.factor(ifelse(valid.df$MEDV >= 30, 1, 0)))
auc(r)
knn = knnreg(MEDV ~ ., data = train.df,k = 4)
pred = predict(knn, newdata = valid.df)
r = roc(as.factor(ifelse(pred >= 30, 1, 0)), as.factor(ifelse(valid.df$MEDV >= 30, 1, 0)))
auc(r)
enumerator = c(1,2,3,4,5,6,7,8,9,10)
maxAuc = 0
max_num = 0
for (num in enumerator)
{
knn = knnreg(MEDV ~ ., data = train.df,k = num)
pred = predict(knn, newdata = valid.df)
r = roc(as.factor(ifelse(pred >= 30, 1, 0)), as.factor(ifelse(valid.df$MEDV >= 30, 1, 0)))
auc_knn = auc(r)
if (auc_knn > maxAuc){
maxAuc = auc_knn
print(maxAuc)
max_num = num
}
}
max_num
## split the data
set.seed(1)
train.index = sample(c(1:dim(x)[1]), dim(x)[1]*0.6)
train.df = x.d[train.index, ]
#NORMALIZATION
nor = function(x) {(x -min(x))/(max(x)-min(x))}
nor_test = function(train,test){
return (test -min(train))/(max(train)-min(train))
}
## split the data
set.seed(1)
train.index = sample(c(1:dim(x)[1]), dim(x)[1]*0.6)
train.df = x[train.index, ]
valid.df = x[-train.index, ]
#NORMALIZATION
nor_train = function(train) {(train -min(train))/(max(train)-min(train))}
nor_test = function(test,train){
return (test -min(train))/(max(train)-min(train))
}
data_norm_train.df = as.data.frame(lapply(train.df, nor_train))
data_norm_test.df = as.data.frame(lapply(valid.df, nor_test, train = train.df))
data_norm_valid.df = as.data.frame(lapply(valid.df, nor_test, train = train.df))
summary(train.df)
## Identification for "30" would also be normalized
## From "summary", we know min = 5, max = 50
##Therefore,(30-5)/(50-5) =
(30-5)/(50-5) =
r = roc(as.factor(ifelse(pred >= 30, 1, 0)), as.factor(ifelse(valid.df$MEDV >= 30, 1, 0)))
## Identification for "30" would also be normalized
## From "summary", we know min = 5, max = 50
##Therefore,(30-5)/(50-5) =
(30-5)/(50-5)
## Identification for "30" would also be normalized
## From "summary", we know min = 5, max = 50
##Therefore,(30-5)/(50-5) =
thresh = (30-5)/(50-5)
enumerator = c(1,2,3,4,5,6,7,8,9,10)
maxAuc = 0
max_num = 0
for (num in enumerator)
{
knn = knnreg(MEDV ~ ., data = data_norm_train.df,k = num)
pred = predict(knn, newdata = data_norm_valid.df)
## Identification for "30" would also be normalized
## From "summary", we know min = 5, max = 50
##Therefore,(30-5)/(50-5) = 0.5555556
thresh = (30-5)/(50-5)
r = roc(as.factor(ifelse(pred >= thresh, 1, 0)), as.factor(ifelse(data_norm_valid.df$MEDV >= thresh, 1, 0)))
auc_knn = auc(r)
if (auc_knn > maxAuc){
maxAuc = auc_knn
print(maxAuc)
max_num = num
}
}
max_num
for (num in enumerator)
{
knn = knnreg(MEDV ~ ., data = data_norm_train.df,k = num)
pred = predict(knn, newdata = data_norm_valid.df)
## Identification for "30" would also be normalized
## From "summary", we know min = 5, max = 50
##Therefore,(30-5)/(50-5) = 0.5555556
thresh = (30-5)/(50-5)
confusionMatrix(as.factor(ifelse(pred >= thresh, 1, 0)), as.factor(ifelse(data_norm_valid.df$MEDV >= thresh, 1, 0)))
#r = roc(as.factor(ifelse(pred >= thresh, 1, 0)), as.factor(ifelse(data_norm_valid.df$MEDV >= thresh, 1, 0)))
#auc_knn = auc(r)
#if (auc_knn > maxAuc){
#  maxAuc = auc_knn
#  print(maxAuc)
#  max_num = num
}
}
for (num in enumerator)
{
knn = knnreg(MEDV ~ ., data = data_norm_train.df,k = num)
pred = predict(knn, newdata = data_norm_valid.df)
## Identification for "30" would also be normalized
## From "summary", we know min = 5, max = 50
##Therefore,(30-5)/(50-5) = 0.5555556
thresh = (30-5)/(50-5)
confusionMatrix(as.factor(ifelse(pred >= thresh, 1, 0)), as.factor(ifelse(data_norm_valid.df$MEDV >= thresh, 1, 0)))
#r = roc(as.factor(ifelse(pred >= thresh, 1, 0)), as.factor(ifelse(data_norm_valid.df$MEDV >= thresh, 1, 0)))
#auc_knn = auc(r)
#if (auc_knn > maxAuc){
#  maxAuc = auc_knn
#  print(maxAuc)
#  max_num = num
#}
}
View(data_norm_valid.df)
View(data_norm_train.df)
View(data_norm_valid.df)
#data_norm_valid.df = as.data.frame(lapply(valid.df, nor_test, train = train.df))
data_norm_valid.df = mapply(nor_test, valid.df, train.df)
View(data_norm_valid.df)
data_norm_valid.df = as.data.frame(lapply(valid.df, nor_test, train = train.df))
View(data_norm_valid.df)
data_norm_valid.df = as.data.frame(lapply(test = valid.df, nor_test, train = train.df))
data_norm_valid.df = as.data.frame(lapply(test = valid.df, nor_test, train = train.df))
return (test -min(train))/(max(train)-min(train))
nor_test = function(test,train){
return (test -min(train))/(max(train)-min(train))
}
data_norm_valid.df = as.data.frame(lapply(test = valid.df, nor_test, train = train.df))
data_norm_valid.df = as.data.frame(lapply(valid.df, nor_test, train = train.df))
View(data_norm_valid.df)
nor_test = function(test,train){
print(min(train))
print(max(train))
return (test -min(train))/(max(train)-min(train))
}
data_norm_valid.df = as.data.frame(lapply(valid.df, nor_test, train = train.df))
View(data_norm_train.df)
nor_test = function(test,train){
(test -min(train))/(max(train)-min(train))
}
data_norm_valid.df = as.data.frame(lapply(valid.df, nor_test, train = train.df))
View(data_norm_valid.df)
enumerator = c(1,2,3,4,5,6,7,8,9,10)
maxAuc = 0
max_num = 0
for (num in enumerator)
{
knn = knnreg(MEDV ~ ., data = data_norm_train.df,k = num)
pred = predict(knn, newdata = data_norm_valid.df)
## Identification for "30" would also be normalized
## From "summary", we know min = 5, max = 50
##Therefore,(30-5)/(50-5) = 0.5555556
thresh = (30-5)/(50-5)
confusionMatrix(as.factor(ifelse(pred >= thresh, 1, 0)), as.factor(ifelse(data_norm_valid.df$MEDV >= thresh, 1, 0)))
#r = roc(as.factor(ifelse(pred >= thresh, 1, 0)), as.factor(ifelse(data_norm_valid.df$MEDV >= thresh, 1, 0)))
#auc_knn = auc(r)
#if (auc_knn > maxAuc){
#  maxAuc = auc_knn
#  print(maxAuc)
#  max_num = num
#}
}
View(data_norm_valid.df)
summary(valid.df)
#NORMALIZATION
nor_train = function(train) {(train -min(train))/(max(train)-min(train))}
nor_test = function(test,train){
(test -min(train))/(max(train)-min(train))
}
data_norm_train.df = as.data.frame(lapply(train.df, nor_train))
data_norm_valid.df = as.data.frame(lapply(valid.df, nor_test, train = train.df))
View(data_norm_valid.df)
## split the data
set.seed(1)
train.index = sample(c(1:dim(x)[1]), dim(x)[1]*0.6)
train.df = x[train.index, ]
valid.df = x[-train.index, ]
summary(valid.df)
#NORMALIZATION
nor_train = function(train) {(train -min(train))/(max(train)-min(train))}
nor_test = function(test,train){
(test -min(train))/(max(train)-min(train))
}
data_norm_train.df = as.data.frame(lapply(train.df, nor_train))
data_norm_valid.df = as.data.frame(lapply(valid.df, nor_test, train = train.df))
summary(data_norm_train.df)
summary(data_norm_valid.df)
data_norm_valid.df = mapply(nor_test, valid.df, train.df)
summary(data_norm_valid.df)
summary(data_norm_train.df)
data_norm_valid.df = as.data.frame(mapply(nor_test, valid.df, train.df))
data_norm_train.df = as.data.frame(lapply(train.df, nor_train))
data_norm_valid.df = as.data.frame(mapply(nor_test, valid.df, train.df))
summary(data_norm_train.df)
summary(data_norm_valid.df)
enumerator = c(1,2,3,4,5,6,7,8,9,10)
maxAuc = 0
max_num = 0
for (num in enumerator)
{
knn = knnreg(MEDV ~ ., data = data_norm_train.df,k = num)
pred = predict(knn, newdata = data_norm_valid.df)
## Identification for "30" would also be normalized
## From "summary", we know min = 5, max = 50
##Therefore,(30-5)/(50-5) = 0.5555556
thresh = (30-5)/(50-5)
confusionMatrix(as.factor(ifelse(pred >= thresh, 1, 0)), as.factor(ifelse(data_norm_valid.df$MEDV >= thresh, 1, 0)))
#r = roc(as.factor(ifelse(pred >= thresh, 1, 0)), as.factor(ifelse(data_norm_valid.df$MEDV >= thresh, 1, 0)))
#auc_knn = auc(r)
#if (auc_knn > maxAuc){
#  maxAuc = auc_knn
#  print(maxAuc)
#  max_num = num
#}
}
#max_num
enumerator = c(1,2,3,4,5,6,7,8,9,10)
maxAuc = 0
max_num = 0
for (num in enumerator)
{
knn = knnreg(MEDV ~ ., data = data_norm_train.df,k = num)
pred = predict(knn, newdata = data_norm_valid.df)
## Identification for "30" would also be normalized
## From "summary", we know min = 5, max = 50
##Therefore,(30-5)/(50-5) = 0.5555556
thresh = (30-5)/(50-5)
#confusionMatrix(as.factor(ifelse(pred >= thresh, 1, 0)), as.factor(ifelse(data_norm_valid.df$MEDV >= thresh, 1, 0)))
r = roc(as.factor(ifelse(pred >= thresh, 1, 0)), as.factor(ifelse(data_norm_valid.df$MEDV >= thresh, 1, 0)))
auc_knn = auc(r)
if (auc_knn > maxAuc){
maxAuc = auc_knn
print(maxAuc)
max_num = num
}
}
max_num
auc_tree
maxAuc
View(valid.df)
CRIM = c(0.2)
ZN= c(0)
INDUS = c(7)
CHAS = c(0)
NOX = c(0.538)
RM = c(6)
AGE = c(62)
DIS = c(4.7)
RAD = c(4)
TAX = c(307)
PTRATIO = c(21)
B = c(360)
LSTAT = c(10)
housing_pred2.data <- data.frame(CRIM,
ZN,
INDUS,
CHAS,
NOX,
RM,
AGE,
DIS,
RAD,
TAX,
PTRATIO ,
B,
LSTAT)
View(housing_pred2.data)
#pred1 = predict(tr, newdata = valid.df)
pred2 = predict(tr, newdata = housing_pred2.data)
View(data_norm_test.df)
View(bank.df)
View(data_norm_test.df)
housing_pred.df = read.xlsx("newBostonHousing.xlsx")
housing_pred.df = read.xls("newBostonHousing.xlsx")
install.packages(xlsx)
libray(xlsx)
library(xlsx)
housing_pred.df = read.xls("newBostonHousing.xlsx")
install.packages("xlsx")
library("xlsx")
install.packages("xlsx")
library("xlsx")
housing_pred.df = read.csv("newBostonHousing.csv")
housing_pred2.df = rbind(housing_pred.df,c(0.2,0,7,0,0.538,6,62,4.7,4,307,21,360,10)
View(housing_pred.df)
View(housing_pred.df)
View(housing_pred2.data)
View(housing_pred.df)
View(housing_pred2.data)
View(housing_pred.df)
pred1 = predict(tr, newdata = housing_pred.df)
housing_pred.df$MEDV = 0
pred1 = predict(tr, newdata = housing_pred.df)
str(housing_pred.df)
str(housing.df)
LSTAT = c(10.0)
CRIM = c(0.2)
ZN= c(0.0)
INDUS = c(7.0)
CHAS = c(0)
NOX = c(0.538)
RM = c(6.0)
AGE = c(62.0)
DIS = c(4.7)
RAD = c(4)
TAX = c(307)
PTRATIO = c(21.0)
B = c(360.0)
LSTAT = c(10.0)
ousing_pred.df <- data.frame(CRIM,
ZN,
INDUS,
CHAS,
NOX,
RM,
AGE,
DIS,
RAD,
TAX,
PTRATIO ,
B,
LSTAT)
housing_pred.df <- data.frame(CRIM,
ZN,
INDUS,
CHAS,
NOX,
RM,
AGE,
DIS,
RAD,
TAX,
PTRATIO ,
B,
LSTAT)
str(housing_pred.df)
CRIM = c(0.2)
ZN= c(0)
INDUS = c(7)
CHAS = c(0)
NOX = c(0.538)
RM = c(6)
AGE = c(62)
DIS = c(4.7)
RAD = c(4)
TAX = c(307)
PTRATIO = c(21)
B = c(360)
LSTAT = c(10)
housing_pred.df <- data.frame(CRIM = as.numeric(CRIM),
ZN = as.numeric(ZN),
INDUS = as.numeric(INDUS),
CHAS = as.integer(CHAS),
NOX = as.numeric(NOX),
RM = as.numeric(RM),
AGE = as.numeric(AGE),
DIS = as.numeric(DIS),
RAD = as.integer(RAD),
TAX = as.integer(TAX),
PTRATIO = as.numeric(PTRATIO),
B = as.numeric(B),
LSTAT = as.numeric(LSTAT))
View(housing_pred.df)
str(housing_pred.df)
pred = predict(tr, newdata = housing_pred.df)
pred
summary(housing.df)
as.numeric(pred > 30)
## Save the auc variable for later use
auc_tree
maxAuc
